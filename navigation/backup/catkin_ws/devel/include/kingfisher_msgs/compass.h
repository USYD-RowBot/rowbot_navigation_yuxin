// Generated by gencpp from file kingfisher_msgs/compass.msg
// DO NOT EDIT!


#ifndef KINGFISHER_MSGS_MESSAGE_COMPASS_H
#define KINGFISHER_MSGS_MESSAGE_COMPASS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kingfisher_msgs
{
template <class ContainerAllocator>
struct compass_
{
  typedef compass_<ContainerAllocator> Type;

  compass_()
    : compass_receivedTime(0.0)
    , compass_heading(0.0)  {
    }
  compass_(const ContainerAllocator& _alloc)
    : compass_receivedTime(0.0)
    , compass_heading(0.0)  {
  (void)_alloc;
    }



   typedef double _compass_receivedTime_type;
  _compass_receivedTime_type compass_receivedTime;

   typedef double _compass_heading_type;
  _compass_heading_type compass_heading;




  typedef boost::shared_ptr< ::kingfisher_msgs::compass_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kingfisher_msgs::compass_<ContainerAllocator> const> ConstPtr;

}; // struct compass_

typedef ::kingfisher_msgs::compass_<std::allocator<void> > compass;

typedef boost::shared_ptr< ::kingfisher_msgs::compass > compassPtr;
typedef boost::shared_ptr< ::kingfisher_msgs::compass const> compassConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kingfisher_msgs::compass_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kingfisher_msgs::compass_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kingfisher_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'kingfisher_msgs': ['/home/usydrowbot/catkin_ws/src/kingfisher_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kingfisher_msgs::compass_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kingfisher_msgs::compass_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kingfisher_msgs::compass_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kingfisher_msgs::compass_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kingfisher_msgs::compass_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kingfisher_msgs::compass_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kingfisher_msgs::compass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e353f687f3a4ad2733487eb5dba3f883";
  }

  static const char* value(const ::kingfisher_msgs::compass_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe353f687f3a4ad27ULL;
  static const uint64_t static_value2 = 0x33487eb5dba3f883ULL;
};

template<class ContainerAllocator>
struct DataType< ::kingfisher_msgs::compass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kingfisher_msgs/compass";
  }

  static const char* value(const ::kingfisher_msgs::compass_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kingfisher_msgs::compass_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 compass_receivedTime\n\
float64 compass_heading\n\
";
  }

  static const char* value(const ::kingfisher_msgs::compass_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kingfisher_msgs::compass_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.compass_receivedTime);
      stream.next(m.compass_heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct compass_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kingfisher_msgs::compass_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kingfisher_msgs::compass_<ContainerAllocator>& v)
  {
    s << indent << "compass_receivedTime: ";
    Printer<double>::stream(s, indent + "  ", v.compass_receivedTime);
    s << indent << "compass_heading: ";
    Printer<double>::stream(s, indent + "  ", v.compass_heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINGFISHER_MSGS_MESSAGE_COMPASS_H
